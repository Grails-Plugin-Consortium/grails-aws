h1. Grails AWS Plugin

h2. About

Grails AWS plugin intends to provide most of any other reason, an *EASY WAY* to access and use AWS services 

h2. Features

h3. AWS S3 Uploads

Plugin adds the *s3upload* method to the usual *io.File* class, you can call this method passing a simple closure configuring the upload request.
Check the action snippet below:

<pre>
	def file = request.getFile("photo")
	file.s3upload {
		credentials "your-access-key-id", "your-secret-access-key"
		bucket "the-bucket-name"
		acl "public"
		rrs true
		metadata [param: value, param2: value2]
	}
</pre>

h4. credentials 

Use your credentials to connect to AWS.

<pre>
	credentials "AAAAAAAAAAAAAAAAAA", "ZZZZZZZZZZZZZZZZZZZZZZ"
</pre>

h4. bucket

The name of the bucket to upload this file. Bucket will not be created, check if exists before uploading to it.

<pre>
	bucket "user-pictures"
</pre>

h4. acl

The permissions that will be granted on this file, you can use:

*public:* Allow public access to everyone that attemps to read this file
*private:* Sets private access to this file, only your account will read/write on it
*public_read_write:* This will make this file wide open to any AWS account, read and write
*authenticated_read:* Using this acl string, only logged AWS accounts will have permissions to read the file

<pre>
	acl "public"|"private"|"public_read_write"|"authenticated_read"
</pre>

h4. rrs

If this file will rely on RRS (Reduced Redundancy Storage) or not.

<pre>
	rrs true|false
</pre>

h4. metadata

receives a *map* containing all metadata that will be attached to this file:

<pre>
	metadata [user-id: 123, username: 'johndoe', registered-date: new Date().format('dd/MM/yyyy')]
</pre>

h3. Defining default parameters

If you do not set credentials, bucket or other params everytime, you can set this on your *Config.groovy* file, this way:

<pre>
	grails.plugin.aws.s3.config.accessKey = "AKICAAJI313YAXNMAEXORAJ6WUA"
	grails.plugin.aws.s3.config.secretKey = "6OMHlB3RpCodfa3MhRbs4Rur4iuW_=3MdSt42MnZTWWh"
	grails.plugin.aws.s3.config.bucket    = "grails-plugin-test"
	grails.plugin.aws.s3.config.acl       = "public"
	grails.plugin.aws.s3.config.rrs       = true
</pre>

h2. Changelog

h3. Version 0.1

* Upload to AWS S3

h2. Roadmap

h3. Amazon S3

* Create public links for private resources with a pre-defined time to expire
* Ability to remove files from S3
* Bucket management

h3. Amazon Cloudfront

* Cloudfront management

h3. Amazon SNS

* Basic integration with Amazon SNS

h3. Amazon SQS

* Basic integration with Amazon SQS

h2. Contributions

If you want to contribute, just fork the repo, implement what you want and send me a pull request.
Just remember, the focus on this plugin it is not the complexity of features, but the ease on using it! :) 

h2. Contact

Lucas Teixeira
lucastex at gmail dot com
twitter @lucastex