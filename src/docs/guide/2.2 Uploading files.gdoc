The plugin adds support for uploading files to Amazon S3, by adding a s3upload(...) method to *File* and *InputStream* classes, so you'll just need to call this method passing a closure with overwritten config options, but if you do not want to overwrite it, just leave this and the plugin will catch from the Config.groovy default options. 

h3. Simple File upload from a File object

{code}
def s3file = new File("/tmp/test.txt").s3upload {
    path "folder/to/my/file/"
}
{code}

This way your test.txt file will be uploaded to 

{code}
<default-bucket>.s3.amazonaws.com/folder/to/my/file/test.txt
{code}

If you want to overwrite config during the file upload, check this guide next section.

h3. Uploading files directly from its InputStream

This is useful when you don't have the file stored in your filesystem, and don't want to have.
When user uploads files to your application using a *multipart/form-data* form, you can upload it directly to s3. Imagine it have an upload form like this:

{code}
<g:uploadForm action="uploadFromInputStream">
    <input type="file" name="photo">
    <input type="submit" value="upload">
</g:uploadForm>
{code}

you could have your *uploadFromInputStream* action implemented this way:

{code}
def file = request.getFile('photo')
def uploadedFile = file.inputStream.s3upload(file.originalFilename) {
    bucket "file-upload-from-inputstream"
}
{code}

{warning}
Uploading from InputStream requires one extra parameters, the filename that this inputstream will have.
{warning}

Note that when you use *File*.s3upload you just pass the closure that configures it. When using from one inputStream, you *SHOULD* have to specify the name that file will have and the file size. The above example show exactly how to do it with the correct info from the uploaded file.

h3. Storing uploaded information for later use

If you are uploading some picture to S3, you'll probably need to store information on how to get that file again later.

The *s3upload* operation returns an instance of *grails.plugin.aws.s3.S3File*. As this plugin uses jets3t ([http://jets3t.s3.amazonaws.com/index.html|http://jets3t.s3.amazonaws.com/index.html]) to handle file upload, the S3File is just a wrapper for a *delegated* jets3t S3Object instance as you can see below:

{code}
package grails.plugin.aws.s3
import org.jets3t.service.model.S3Object

class S3File {
    
    @Delegate S3Object source
    
    public S3File(S3Object _source) {
        this.source = _source
    }    
}
{code}

So, you can call any S3Object method on S3File instance. S3Object API is available here: [http://jets3t.s3.amazonaws.com/api/org/jets3t/service/model/S3Object.html|http://jets3t.s3.amazonaws.com/api/org/jets3t/service/model/S3Object.html], for example, to retrieve the ETag hash for the S3File uploaded you would just call:

{code}
def s3file = ... //upload the file
def etag = s3file.getETag()
{code}

The *S3File* object returned will give all information you'll need. Now, depends on what information you want to store. Follow S3Object docs (link above) and get whatever you want.

A common approach would be storing the bucket, path and file (key). With these parameters you can rebuild the URL to reach the file, or even delete the file. 