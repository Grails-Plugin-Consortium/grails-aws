You can configure the plugin in Config.groovy or per upload, doing this in Config.groovy, allow you to do it one time for the entire application, and when in a specific file upload, you can overwrite it.

h3. AWS Credentials

You can set your access-key and secret-key with the config keys below

{code}
grails.plugin.aws.s3.config.accessKey = "your-access-key-here"
grails.plugin.aws.s3.config.secretKey = "your-secret-key-here"
{code}  

h3. Bucket name

To set a default bucket, that will be used to all file upload use the config below

{code}
grails.plugin.aws.s3.config.bucket    = "grails-plugin-test"
{code}

During the first upload on this bucket, it will be created if does not exist.

h3. ACL (file permission)

The permissions that will be granted on this file, you can use:

* *public:* Allow public access to everyone that attemps to read this file
* *private:* Sets private access to this file, only your account will read/write on it
* *public_read_write:* This will make this file wide open to any AWS account, read and write
* *authenticated_read:* Using this acl string, only logged AWS accounts will have permissions to read the file

To configure public access as default to all file uploads, use this:

{code}
grails.plugin.aws.s3.config.acl = "public"
{code}

If you like to set private access to your files, you should config this way:

{code}
grails.plugin.aws.s3.config.acl = "private"
{code}

h3. RRS - Reduced Redundancy Storage

RRS stored files provides a cheaper storage with 99.99% durability instead of 99.999999999% as the default provided by AWS S3. More information here: http://aws.amazon.com/about-aws/whats-new/2010/05/19/announcing-amazon-s3-reduced-redundancy-storage/

This is disabled by default, if you like to set RRS enabled for all uploads, use this config key:

{code}
grails.plugin.aws.s3.config.rrs = true
{code}

